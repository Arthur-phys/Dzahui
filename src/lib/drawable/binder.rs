use gl;

/// # General Information
/// 
/// Variables asocciated with GPU and drawable object(s). Assigned by OpenGL. Should always be mutable.
/// 
/// # Fields
/// 
/// * `vbo` (Vertex Buffer Object) -  Vertices Generated by Mesh. 
/// * `vao` (Vertex Array Object) - Binds vertices and it's configuration with OpenGL.
/// * `ebo` (Element Buffer Object) - // Indices to draw vertices.
/// 
pub struct Binder {
    pub(crate) vbo: u32,
    pub(crate) vao: u32,
    pub(crate) ebo: u32,
}

impl Binder {
    /// Simple new function. Generates new instance of Binder.
    pub(crate) fn new() -> Binder {
        Binder { vbo: 0, vao: 0, ebo: 0 }
    }

    /// # General Information
    /// 
    /// Sets up binder with GPU. Should always be used after instance of window has set up OpenGL context.
    /// 
    /// # Parameters
    /// 
    /// * `&mut self` - OpenGL changes the values of instance fields effectively setting up linkage beetween vao and vbo and ebo.
    /// 
    pub(crate) fn setup(&mut self) {

        unsafe {
            // Create VAO
            gl::GenVertexArrays(1,&mut self.vao);
            // Bind Vertex Array Object first
            // Since it is bound first, it binds to the EBO and VBO (because they are the only ones being bound after it)
            gl::BindVertexArray(self.vao);
            
            // Generates a VBO in GPU
            gl::GenBuffers(1, &mut self.vbo);
            // Generates a EBO in GPU
            gl::GenBuffers(1, &mut self.ebo);
            // Bind VBO
            gl::BindBuffer(gl::ARRAY_BUFFER, self.vbo);
        }
    }
}